class Solution {
public:
    int compress(vector<char>& chars) {
        chars.push_back('|');
        string ans;
        int tmp=0;
        char tmp2;
        for(int i=0;i<chars.size()-1;i++){
            tmp2=chars[i];
            tmp=1;
            while(chars[i+1]==tmp2){
                i++;
                tmp++;
            }
            ans=ans+tmp2;
            if(tmp>1){
                ans=ans+to_string(tmp);
            }
        }
        cout<<ans<<endl;
        chars.clear();
        for(auto i:ans){
            chars.push_back(i);
        }
        return chars.size();
    }
};
// class Solution {
// public:
//     int compress(vector<char>& chars) {
//         unordered_map<char,int>um;
//         for(int i=0;i<chars.size();i++){
//             um[chars[i]]++;
//         }
//         set<char>ch;
//         for(auto i:chars){
//             ch.insert(i);
//         }
//         string ans;
//         for(auto i:ch){
//             ans=ans+i;
//             string len=to_string(um[i]);
//             if(len!="1"){
//                 ans=ans+len;
//             }
//         }
//         cout<<ans;
//         chars.clear();
//         for(auto i:ans){ 
//             chars.push_back(i);
//         }
//         return chars.size();
//     }
// };
